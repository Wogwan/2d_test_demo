% function [V,kk]=sos_optimal_v(f,gg,k,B,u,C)
clear;
pvar x1 x2 Vtol;
x = [x1;x2];
%%
C1 = (x1+3)^2+(x2-4)^2-1;
C2 = (x1+3)^2+(x2+4)^2-1;
C3 = (x1-3)^2+(x2-2)^2-1;
C = [C1;C2;C3];
B = -0.8373071544699282*x1^2-0.2264739025243779*x1*x2-0.8429768805704951*x2^2+0.2188991281347412*x1-0.2235332249263359*x2+12.95248084923515;
[a1,b1] = coeffs(p2s(B));
C0 = vpa(a1(end));
b1(end)=[];
a1(end)=[];
B0 = s2p(a1*b1');
figure(14);clf;hold on;
[~,~]=pcontour(C(1),0,domain,'r');           % Plot the unsafe region
% [~,~]=pcontour(C(2),0,domain,'r');           % Plot the unsafe region
% [~,~]=pcontour(C(3),0,domain,'r');           % Plot the unsafe region
[~,~]=pcontour(B,0,domain,'b');              % Plot the original barrier function
%%
f = [x2; -x1-x2*(1-x1^2)];
gg = [1;1];
kk = 1; gamma = 0;
V_degree = 2; l_au = 2;
l_us = 4; l_input = 2;
% dom = 8; domain = [-dom dom -dom dom];
dom = 100000; domain = [-dom dom -dom dom];
%%
% [V,vc] = polydecvar('v_w',monomials(x,0:V_degree));
[V,vc] = polydecvar('v_w',monomials(x,[1 2]));
[L1,L1_Q] = sosdecvar('L1_w',monomials(x,0:l_au));
[L2,L2_Q] = sosdecvar('L2_w',monomials(x,0:l_au)); 
[L3,L3_Q] = sosdecvar('L3_w',monomials(x,0:l_us)); 
[L4,L4_Q] = sosdecvar('L4_w',monomials(x,0:l_us)); 
[L5,L5_Q] = sosdecvar('L5_w',monomials(x,0:l_us)); 
% [u1,u1_Q] = polydecvar('u1_w',monomials(x,0:l_input));
% [u2,u2_Q] = polydecvar('u2_w',monomials(x,0:l_input));
u1 = 0.0028924319206776547691584156041245 - 246442.44994681805837899446487427*x2 - 248929.68200441679800860583782196*x1;
u2 = -243762.8124551248*x1 - 241337.8482460145*x2 + 0.002745113396789777;
%%
hdot = jacobian(B, x1)*(f(1)+gg(1)*u1)+ jacobian(B, x2)*(f(2)+gg(2)*u2);
Vdot = jacobian(V, x1)*(f(1)+gg(1)*u1)+ jacobian(V, x2)*(f(2)+gg(2)*u2);
%% Constraint 1
% pcr_1 = L1 >= 0;
% pcr_2 = L2 >= 0;
% pcr_6 = L3 >= 0;
% pcr_7 = L4 >= 0;
% pcr_8 = L5 >= 0;
% pcr_31 = -V+C(1)*L3 >= 0;
% pcr_32 = -V+C(2)*L4 >= 0;
% pcr_33 = -V+C(3)*L5 >= 0;
% pconstr_1 = V-L1*B >= 0;
% pconstr_2 = Vdot+L2*B-Vtol >= 0;
% pconstr_3 = Vtol >= 0;
% % pconstr = [pcr_1; pcr_2; pcr_6; pcr_7; pcr_8; pcr_31; pcr_32; pcr_33; pconstr_1; pconstr_2; pconstr_3];
% % pconstr = [pcr_1; pcr_2; pcr_6; pcr_7; pcr_8; pconstr_1; pconstr_2; pconstr_3;pcr_31; pcr_32; pcr_33];
% % pconstr = [pconstr_1; pconstr_2; pconstr_3];
% pconstr = [pcr_1;pcr_2;pcr_6;pconstr_1;pconstr_2;pconstr_3;pcr_31];
%% Constraint
pcr_1 = L1 >= 0;
pcr_2 = L2 >= 0;
% pcr_6 = L3 >= 0;
% pcr_31 = V-C(1)*L3 >= 0;
pconstr_1 = V-L1*B >= 0;
% pconstr_2 = Vdot+L2*B+gamma*B-Vtol >= 0;
pconstr_2 = Vdot+L2*B+gamma*B >= 0;
pconstr_3 = Vtol >= 0;
% pconstr = [pcr_1;pcr_2;pcr_6;pconstr_1;pconstr_2;pcr_31];
pconstr = [pcr_1;pcr_2;pconstr_1;pconstr_2];
%% Set objection
obj = -Vtol;
%% Solve feasibility problem
opts = sosoptions;
opts.form = 'kernel';
opts.solver = 'mosek';
% [info,dopt] = sosopt(pconstr,x,obj,opts);
[info,dopt] = sosopt(pconstr,x,opts);

% Create output
if info.feas
    V = subs(V,dopt)
else
    kk = 0;
    V  = 0;
    fprintf('Lyapunov SOS Factor L can not find.======\n');
    return;
end
% end